框架使用教學
======================


檔案架構
----------------------

從 ``v1.0.0`` 開始，LGF 檔案架構主要如下。


資料夾結構樹
~~~~~~~~~~~~~~~~~~~~~

 .. code-block:: rst

    ├── Library/
    │   ├── gameutil.h
    │   ├── gameutil.cpp
    │   ├── gamecore.h
    │   └── gamecore.cpp
    ├── Core/
    │   └── Some core file...
    └── Game/
        ├── mygame.h
        ├── mygame_initialize.cpp
        ├── mygame_run.cpp
        └── mygame_over.cpp

以下，我們會一一介紹每個資料夾的職責，以及它們該做的事情。


Game 資料夾
~~~~~~~~~~~~~~~~~~~~~

在 ``/Game`` 資料夾中， ``mygame_initialize.cpp``、``mygame_run.cpp`` 與 ``mygame_over.cpp`` 主要分配了遊戲中初始、運行過程與結束的任務。
這些檔案的主要實作了 ``mygame.h`` 內 ``CGameStateInit``、``CGameStateRun`` 與 ``CGameStateOver`` 的函式。
在實作遊戲中，我們可以在這三個檔案中，描述遊戲如何顯示畫面（``OnShow()``）、鍵盤與滑鼠事件（``onKeyDown()``）以及常駐事件（``onMove()``）等，見 `CGameState 集 <#CGameState 集>`_。


Library 資料夾
~~~~~~~~~~~~~~~~~~~~~

在 ``/Library`` 資料夾中，``gameutil`` 提供了製作遊戲時必要的工具，例如 ``CMovingBitmap`` 與 ``CTextDraw`` 等類別。
而 ``gamecore`` 提供了 ``gameutil`` 有關遊戲核心的類別，可以大概看一下，但實際上設計遊戲時不會用到。


Core 資料夾
~~~~~~~~~~~~~~~~~~~~~

在 ``/Core`` 資料夾中，我們省略了這個部分的介紹。
基於 ``/Core`` 資料夾內主要描述了使用 ``MVC`` 製作的類別，使得遊戲能夠正常運作，故我們跳過了這個過程。


CGameState 集
-----------------------
在遊戲設計中，我們主要會在 ``CGameState`` 群進行設計，也就是 ``CGameStateInit``、``CGameStateRun``、``CGameStateOver``。
我們以一張圖來呈現目前 ``CGameState`` 群的運作模式。

.. image:: https://imgur.com/LcXJ475.jpg

我們會在 ``OnBeginState`` 中初始化遊戲開始的數值，讓每次從初始畫面開始遊戲後，遊戲數值會初始化成新遊戲。
接下來將會不斷運行 ``OnMove``、``OnShow`` 函式來運行遊戲內容與呈現遊戲畫面。
除此之外，還有 ``Mouse/Key events`` 來處理滑鼠與鍵盤相關的事件，處理當滑鼠被移動或點擊，或鍵盤被按下或放開時的事件。
在接下來的章節，我們會詳細描述這幾個部分。


OnBeginState() 函式
~~~~~~~~~~~~~~~~~~~~~~~
在這個函式中，主要處理了遊戲數值初始化，使遊戲成為新遊戲的函數。

這個函數在從 ``CGameStateInit`` 進入到 ``CGameStateRun`` 後才會觸發。


OnInit() 函式
~~~~~~~~~~~~~~~~~~~~~~~
在這個函式中，主要處理了圖片初始化、素材初始化等相關細節。

在遊戲初始化時觸發一次。


OnMove() 函式
~~~~~~~~~~~~~~~~~~~~~~~
在這個函式中，主要處理了遊戲運行時的部分，為遊戲運行的常駐函式。

這個函式約會在一秒中運行 30 次，通常會用來處理遊戲運行的細節，例如圖片因為條件而變換幀，人物按住某按鍵後可以持續移動的細節。


OnShow() 函式
~~~~~~~~~~~~~~~~~~~~~~~
在這個函式中，主要處理了遊戲顯示圖片的部分，為遊戲運行的常駐函式。

這個函式約會在一秒中運行 30 次，通常會用來處理遊戲呈現圖片，且必須要在這個函式中呈現圖片，你可以在這個地方處理圖片印出、圖片疊加、文字印出等相關的細節。


Key/Mouse 偵聽函式群
~~~~~~~~~~~~~~~~~~~~~~~
這個函式群具有許多函式，可以用來偵聽滑鼠左鍵右鍵按下、滑鼠移動、鍵盤按鍵按下、或鍵盤按鍵釋放等事件。

這個函式群具有下列這些函式：
 - ``OnKeyDown``：用於處理鍵盤按鍵按下的事件。
 - ``OnKeyUp``：用於處理鍵盤按鍵釋放的事件。
 - ``OnLButtonDown``：用於處理滑鼠左鍵按下的事件。
 - ``OnLButtonUp``：用於處理滑鼠左鍵釋放的事件。
 - ``OnRButtonDown``：用於處理滑鼠右鍵按下的事件。
 - ``OnRButtonUp``：用於處理滑鼠右鍵放開的事件。
 - ``OnMouseMove``：用於處理滑鼠移動的事件。

我們不知道這個函式一秒能夠運行幾次，但我們可以假設它非常快。
